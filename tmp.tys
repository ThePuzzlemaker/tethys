enum List[T] = Nil
     	     | Cons T List[T]

enum Option[T] = None
     	       | Some T

def optMap : forall 'T 'U.Option['T] -> ('T -> 'U) -> Option['U]
    	   = λo f.Option o None (λt.Some (f t))
def optBind : forall 'T 'U.Option['T] -> ('T -> Option['U]) -> Option['U]
    	    = λo f.Option o None (λt.f t)

def hd : forall 'T. List['T] -> Option['T]
       = λl. List l None (λh _.Some h)
def tl : forall 'T. List['T] -> Option[List['T]]
       = λl. List l None (λ_ t.Some t)
def length : forall 'T. List['T] -> Nat
    	   = λl. List l (λ_.Zero) (λ_ t _.Succ (length t)) ()

enum Nat = Zero
         | Succ Nat
	 
def id    : forall 'a.'a -> 'a = λx.x
def const : forall 'a.'a -> 'a -> 'a = λx y.x

def add  : Nat -> Nat -> Nat
         = λn m.Nat n m (λn.Succ (add n m))
def mult : Nat -> Nat -> Nat
         = λn m.Nat n (Zero) (λn.add m (mult n m))
def pred : Nat -> Nat
    	 = λn.Nat n Zero id
def fact : Nat -> Nat
    	 = λn.Nat n (Succ Zero) (λm.mult n (fact m))

def list : List[Nat] = (Cons Zero (Cons (Succ Zero) Nil))
def main : _ = optBind (tl list) hd
# def foo : () -> () = \x.foo ()
# def main : () = foo ()
